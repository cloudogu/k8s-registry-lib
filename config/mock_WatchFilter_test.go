// Code generated by mockery v2.42.1. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// MockWatchFilter is an autogenerated mock type for the WatchFilter type
type MockWatchFilter struct {
	mock.Mock
}

type MockWatchFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatchFilter) EXPECT() *MockWatchFilter_Expecter {
	return &MockWatchFilter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockWatchFilter) Execute(_a0 []DiffResult) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]DiffResult) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockWatchFilter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockWatchFilter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 []DiffResult
func (_e *MockWatchFilter_Expecter) Execute(_a0 interface{}) *MockWatchFilter_Execute_Call {
	return &MockWatchFilter_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockWatchFilter_Execute_Call) Run(run func(_a0 []DiffResult)) *MockWatchFilter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]DiffResult))
	})
	return _c
}

func (_c *MockWatchFilter_Execute_Call) Return(_a0 bool) *MockWatchFilter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchFilter_Execute_Call) RunAndReturn(run func([]DiffResult) bool) *MockWatchFilter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatchFilter creates a new instance of MockWatchFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatchFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatchFilter {
	mock := &MockWatchFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
