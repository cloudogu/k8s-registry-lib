// Code generated by mockery v2.42.1. DO NOT EDIT.

package localregistry

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"
)

// MockLocalDoguRegistry is an autogenerated mock type for the LocalDoguRegistry type
type MockLocalDoguRegistry struct {
	mock.Mock
}

type MockLocalDoguRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalDoguRegistry) EXPECT() *MockLocalDoguRegistry_Expecter {
	return &MockLocalDoguRegistry_Expecter{mock: &_m.Mock}
}

// Enable provides a mock function with given fields: ctx, dogu
func (_m *MockLocalDoguRegistry) Enable(ctx context.Context, dogu *core.Dogu) error {
	ret := _m.Called(ctx, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu) error); ok {
		r0 = rf(ctx, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLocalDoguRegistry_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockLocalDoguRegistry_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - dogu *core.Dogu
func (_e *MockLocalDoguRegistry_Expecter) Enable(ctx interface{}, dogu interface{}) *MockLocalDoguRegistry_Enable_Call {
	return &MockLocalDoguRegistry_Enable_Call{Call: _e.mock.On("Enable", ctx, dogu)}
}

func (_c *MockLocalDoguRegistry_Enable_Call) Run(run func(ctx context.Context, dogu *core.Dogu)) *MockLocalDoguRegistry_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Dogu))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_Enable_Call) Return(_a0 error) *MockLocalDoguRegistry_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocalDoguRegistry_Enable_Call) RunAndReturn(run func(context.Context, *core.Dogu) error) *MockLocalDoguRegistry_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrent provides a mock function with given fields: ctx, simpleDoguName
func (_m *MockLocalDoguRegistry) GetCurrent(ctx context.Context, simpleDoguName string) (*core.Dogu, error) {
	ret := _m.Called(ctx, simpleDoguName)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrent")
	}

	var r0 *core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.Dogu, error)); ok {
		return rf(ctx, simpleDoguName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.Dogu); ok {
		r0 = rf(ctx, simpleDoguName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, simpleDoguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalDoguRegistry_GetCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrent'
type MockLocalDoguRegistry_GetCurrent_Call struct {
	*mock.Call
}

// GetCurrent is a helper method to define mock.On call
//   - ctx context.Context
//   - simpleDoguName string
func (_e *MockLocalDoguRegistry_Expecter) GetCurrent(ctx interface{}, simpleDoguName interface{}) *MockLocalDoguRegistry_GetCurrent_Call {
	return &MockLocalDoguRegistry_GetCurrent_Call{Call: _e.mock.On("GetCurrent", ctx, simpleDoguName)}
}

func (_c *MockLocalDoguRegistry_GetCurrent_Call) Run(run func(ctx context.Context, simpleDoguName string)) *MockLocalDoguRegistry_GetCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_GetCurrent_Call) Return(_a0 *core.Dogu, _a1 error) *MockLocalDoguRegistry_GetCurrent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalDoguRegistry_GetCurrent_Call) RunAndReturn(run func(context.Context, string) (*core.Dogu, error)) *MockLocalDoguRegistry_GetCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentOfAll provides a mock function with given fields: ctx
func (_m *MockLocalDoguRegistry) GetCurrentOfAll(ctx context.Context) ([]*core.Dogu, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentOfAll")
	}

	var r0 []*core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*core.Dogu, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*core.Dogu); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalDoguRegistry_GetCurrentOfAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentOfAll'
type MockLocalDoguRegistry_GetCurrentOfAll_Call struct {
	*mock.Call
}

// GetCurrentOfAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLocalDoguRegistry_Expecter) GetCurrentOfAll(ctx interface{}) *MockLocalDoguRegistry_GetCurrentOfAll_Call {
	return &MockLocalDoguRegistry_GetCurrentOfAll_Call{Call: _e.mock.On("GetCurrentOfAll", ctx)}
}

func (_c *MockLocalDoguRegistry_GetCurrentOfAll_Call) Run(run func(ctx context.Context)) *MockLocalDoguRegistry_GetCurrentOfAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_GetCurrentOfAll_Call) Return(_a0 []*core.Dogu, _a1 error) *MockLocalDoguRegistry_GetCurrentOfAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalDoguRegistry_GetCurrentOfAll_Call) RunAndReturn(run func(context.Context) ([]*core.Dogu, error)) *MockLocalDoguRegistry_GetCurrentOfAll_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with given fields: ctx, simpleDoguName
func (_m *MockLocalDoguRegistry) IsEnabled(ctx context.Context, simpleDoguName string) (bool, error) {
	ret := _m.Called(ctx, simpleDoguName)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, simpleDoguName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, simpleDoguName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, simpleDoguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalDoguRegistry_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockLocalDoguRegistry_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - simpleDoguName string
func (_e *MockLocalDoguRegistry_Expecter) IsEnabled(ctx interface{}, simpleDoguName interface{}) *MockLocalDoguRegistry_IsEnabled_Call {
	return &MockLocalDoguRegistry_IsEnabled_Call{Call: _e.mock.On("IsEnabled", ctx, simpleDoguName)}
}

func (_c *MockLocalDoguRegistry_IsEnabled_Call) Run(run func(ctx context.Context, simpleDoguName string)) *MockLocalDoguRegistry_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_IsEnabled_Call) Return(_a0 bool, _a1 error) *MockLocalDoguRegistry_IsEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalDoguRegistry_IsEnabled_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockLocalDoguRegistry_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, dogu
func (_m *MockLocalDoguRegistry) Register(ctx context.Context, dogu *core.Dogu) error {
	ret := _m.Called(ctx, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu) error); ok {
		r0 = rf(ctx, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLocalDoguRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockLocalDoguRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - dogu *core.Dogu
func (_e *MockLocalDoguRegistry_Expecter) Register(ctx interface{}, dogu interface{}) *MockLocalDoguRegistry_Register_Call {
	return &MockLocalDoguRegistry_Register_Call{Call: _e.mock.On("Register", ctx, dogu)}
}

func (_c *MockLocalDoguRegistry_Register_Call) Run(run func(ctx context.Context, dogu *core.Dogu)) *MockLocalDoguRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Dogu))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_Register_Call) Return(_a0 error) *MockLocalDoguRegistry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocalDoguRegistry_Register_Call) RunAndReturn(run func(context.Context, *core.Dogu) error) *MockLocalDoguRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterAllVersions provides a mock function with given fields: ctx, simpleDoguName
func (_m *MockLocalDoguRegistry) UnregisterAllVersions(ctx context.Context, simpleDoguName string) error {
	ret := _m.Called(ctx, simpleDoguName)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAllVersions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, simpleDoguName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLocalDoguRegistry_UnregisterAllVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterAllVersions'
type MockLocalDoguRegistry_UnregisterAllVersions_Call struct {
	*mock.Call
}

// UnregisterAllVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - simpleDoguName string
func (_e *MockLocalDoguRegistry_Expecter) UnregisterAllVersions(ctx interface{}, simpleDoguName interface{}) *MockLocalDoguRegistry_UnregisterAllVersions_Call {
	return &MockLocalDoguRegistry_UnregisterAllVersions_Call{Call: _e.mock.On("UnregisterAllVersions", ctx, simpleDoguName)}
}

func (_c *MockLocalDoguRegistry_UnregisterAllVersions_Call) Run(run func(ctx context.Context, simpleDoguName string)) *MockLocalDoguRegistry_UnregisterAllVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLocalDoguRegistry_UnregisterAllVersions_Call) Return(_a0 error) *MockLocalDoguRegistry_UnregisterAllVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocalDoguRegistry_UnregisterAllVersions_Call) RunAndReturn(run func(context.Context, string) error) *MockLocalDoguRegistry_UnregisterAllVersions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocalDoguRegistry creates a new instance of MockLocalDoguRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalDoguRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalDoguRegistry {
	mock := &MockLocalDoguRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
