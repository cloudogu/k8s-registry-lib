// Code generated by mockery v2.42.1. DO NOT EDIT.

package registry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockConfigClient is an autogenerated mock type for the configClient type
type mockConfigClient struct {
	mock.Mock
}

type mockConfigClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigClient) EXPECT() *mockConfigClient_Expecter {
	return &mockConfigClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, name, configData, configType3
func (_m *mockConfigClient) Create(ctx context.Context, name string, configData map[string]string, configType3 configType) error {
	ret := _m.Called(ctx, name, configData, configType3)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, configType) error); ok {
		r0 = rf(ctx, name, configData, configType3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockConfigClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - configData map[string]string
//   - configType3 configType
func (_e *mockConfigClient_Expecter) Create(ctx interface{}, name interface{}, configData interface{}, configType3 interface{}) *mockConfigClient_Create_Call {
	return &mockConfigClient_Create_Call{Call: _e.mock.On("Create", ctx, name, configData, configType3)}
}

func (_c *mockConfigClient_Create_Call) Run(run func(ctx context.Context, name string, configData map[string]string, configType3 configType)) *mockConfigClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string), args[3].(configType))
	})
	return _c
}

func (_c *mockConfigClient_Create_Call) Return(_a0 error) *mockConfigClient_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigClient_Create_Call) RunAndReturn(run func(context.Context, string, map[string]string, configType) error) *mockConfigClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name
func (_m *mockConfigClient) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockConfigClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockConfigClient_Expecter) Delete(ctx interface{}, name interface{}) *mockConfigClient_Delete_Call {
	return &mockConfigClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *mockConfigClient_Delete_Call) Run(run func(ctx context.Context, name string)) *mockConfigClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockConfigClient_Delete_Call) Return(_a0 error) *mockConfigClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigClient_Delete_Call) RunAndReturn(run func(context.Context, string) error) *mockConfigClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *mockConfigClient) Get(ctx context.Context, name string) (configData, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 configData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (configData, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) configData); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(configData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockConfigClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockConfigClient_Expecter) Get(ctx interface{}, name interface{}) *mockConfigClient_Get_Call {
	return &mockConfigClient_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *mockConfigClient_Get_Call) Run(run func(ctx context.Context, name string)) *mockConfigClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockConfigClient_Get_Call) Return(_a0 configData, _a1 error) *mockConfigClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_Get_Call) RunAndReturn(run func(context.Context, string) (configData, error)) *mockConfigClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, configData1
func (_m *mockConfigClient) Update(ctx context.Context, configData1 configData) error {
	ret := _m.Called(ctx, configData1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, configData) error); ok {
		r0 = rf(ctx, configData1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockConfigClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - configData1 configData
func (_e *mockConfigClient_Expecter) Update(ctx interface{}, configData1 interface{}) *mockConfigClient_Update_Call {
	return &mockConfigClient_Update_Call{Call: _e.mock.On("Update", ctx, configData1)}
}

func (_c *mockConfigClient_Update_Call) Run(run func(ctx context.Context, configData1 configData)) *mockConfigClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(configData))
	})
	return _c
}

func (_c *mockConfigClient_Update_Call) Return(_a0 error) *mockConfigClient_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigClient_Update_Call) RunAndReturn(run func(context.Context, configData) error) *mockConfigClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConfigClient creates a new instance of mockConfigClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConfigClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConfigClient {
	mock := &mockConfigClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
