// Code generated by mockery v2.42.1. DO NOT EDIT.

package registry

import (
	context "context"

	config "github.com/cloudogu/k8s-registry-lib/config"

	mock "github.com/stretchr/testify/mock"
)

// mockConfigRepository is an autogenerated mock type for the configRepository type
type mockConfigRepository struct {
	mock.Mock
}

type mockConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigRepository) EXPECT() *mockConfigRepository_Expecter {
	return &mockConfigRepository_Expecter{mock: &_m.Mock}
}

// delete provides a mock function with given fields: ctx
func (_m *mockConfigRepository) delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigRepository_delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'delete'
type mockConfigRepository_delete_Call struct {
	*mock.Call
}

// delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockConfigRepository_Expecter) delete(ctx interface{}) *mockConfigRepository_delete_Call {
	return &mockConfigRepository_delete_Call{Call: _e.mock.On("delete", ctx)}
}

func (_c *mockConfigRepository_delete_Call) Run(run func(ctx context.Context)) *mockConfigRepository_delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockConfigRepository_delete_Call) Return(_a0 error) *mockConfigRepository_delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigRepository_delete_Call) RunAndReturn(run func(context.Context) error) *mockConfigRepository_delete_Call {
	_c.Call.Return(run)
	return _c
}

// get provides a mock function with given fields: ctx
func (_m *mockConfigRepository) get(ctx context.Context) (config.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for get")
	}

	var r0 config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Config); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigRepository_get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'get'
type mockConfigRepository_get_Call struct {
	*mock.Call
}

// get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockConfigRepository_Expecter) get(ctx interface{}) *mockConfigRepository_get_Call {
	return &mockConfigRepository_get_Call{Call: _e.mock.On("get", ctx)}
}

func (_c *mockConfigRepository_get_Call) Run(run func(ctx context.Context)) *mockConfigRepository_get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockConfigRepository_get_Call) Return(_a0 config.Config, _a1 error) *mockConfigRepository_get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigRepository_get_Call) RunAndReturn(run func(context.Context) (config.Config, error)) *mockConfigRepository_get_Call {
	_c.Call.Return(run)
	return _c
}

// watch provides a mock function with given fields: ctx
func (_m *mockConfigRepository) watch(ctx context.Context) (*configWatch, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for watch")
	}

	var r0 *configWatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*configWatch, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *configWatch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configWatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigRepository_watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'watch'
type mockConfigRepository_watch_Call struct {
	*mock.Call
}

// watch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockConfigRepository_Expecter) watch(ctx interface{}) *mockConfigRepository_watch_Call {
	return &mockConfigRepository_watch_Call{Call: _e.mock.On("watch", ctx)}
}

func (_c *mockConfigRepository_watch_Call) Run(run func(ctx context.Context)) *mockConfigRepository_watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockConfigRepository_watch_Call) Return(_a0 *configWatch, _a1 error) *mockConfigRepository_watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigRepository_watch_Call) RunAndReturn(run func(context.Context) (*configWatch, error)) *mockConfigRepository_watch_Call {
	_c.Call.Return(run)
	return _c
}

// write provides a mock function with given fields: ctx, cfg
func (_m *mockConfigRepository) write(ctx context.Context, cfg config.Config) error {
	ret := _m.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Config) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigRepository_write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'write'
type mockConfigRepository_write_Call struct {
	*mock.Call
}

// write is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg config.Config
func (_e *mockConfigRepository_Expecter) write(ctx interface{}, cfg interface{}) *mockConfigRepository_write_Call {
	return &mockConfigRepository_write_Call{Call: _e.mock.On("write", ctx, cfg)}
}

func (_c *mockConfigRepository_write_Call) Run(run func(ctx context.Context, cfg config.Config)) *mockConfigRepository_write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Config))
	})
	return _c
}

func (_c *mockConfigRepository_write_Call) Return(_a0 error) *mockConfigRepository_write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigRepository_write_Call) RunAndReturn(run func(context.Context, config.Config) error) *mockConfigRepository_write_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConfigRepository creates a new instance of mockConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConfigRepository {
	mock := &mockConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
