// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	cache "k8s.io/client-go/tools/cache"

	v1 "k8s.io/client-go/listers/core/v1"
)

// MockConfigMapInformer is an autogenerated mock type for the ConfigMapInformer type
type MockConfigMapInformer struct {
	mock.Mock
}

type MockConfigMapInformer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigMapInformer) EXPECT() *MockConfigMapInformer_Expecter {
	return &MockConfigMapInformer_Expecter{mock: &_m.Mock}
}

// Informer provides a mock function with given fields:
func (_m *MockConfigMapInformer) Informer() cache.SharedIndexInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Informer")
	}

	var r0 cache.SharedIndexInformer
	if rf, ok := ret.Get(0).(func() cache.SharedIndexInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.SharedIndexInformer)
		}
	}

	return r0
}

// MockConfigMapInformer_Informer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Informer'
type MockConfigMapInformer_Informer_Call struct {
	*mock.Call
}

// Informer is a helper method to define mock.On call
func (_e *MockConfigMapInformer_Expecter) Informer() *MockConfigMapInformer_Informer_Call {
	return &MockConfigMapInformer_Informer_Call{Call: _e.mock.On("Informer")}
}

func (_c *MockConfigMapInformer_Informer_Call) Run(run func()) *MockConfigMapInformer_Informer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigMapInformer_Informer_Call) Return(_a0 cache.SharedIndexInformer) *MockConfigMapInformer_Informer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigMapInformer_Informer_Call) RunAndReturn(run func() cache.SharedIndexInformer) *MockConfigMapInformer_Informer_Call {
	_c.Call.Return(run)
	return _c
}

// Lister provides a mock function with given fields:
func (_m *MockConfigMapInformer) Lister() v1.ConfigMapLister {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lister")
	}

	var r0 v1.ConfigMapLister
	if rf, ok := ret.Get(0).(func() v1.ConfigMapLister); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ConfigMapLister)
		}
	}

	return r0
}

// MockConfigMapInformer_Lister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lister'
type MockConfigMapInformer_Lister_Call struct {
	*mock.Call
}

// Lister is a helper method to define mock.On call
func (_e *MockConfigMapInformer_Expecter) Lister() *MockConfigMapInformer_Lister_Call {
	return &MockConfigMapInformer_Lister_Call{Call: _e.mock.On("Lister")}
}

func (_c *MockConfigMapInformer_Lister_Call) Run(run func()) *MockConfigMapInformer_Lister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigMapInformer_Lister_Call) Return(_a0 v1.ConfigMapLister) *MockConfigMapInformer_Lister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigMapInformer_Lister_Call) RunAndReturn(run func() v1.ConfigMapLister) *MockConfigMapInformer_Lister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigMapInformer creates a new instance of MockConfigMapInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigMapInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigMapInformer {
	mock := &MockConfigMapInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
