// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockConfigClient is an autogenerated mock type for the configClient type
type mockConfigClient struct {
	mock.Mock
}

type mockConfigClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigClient) EXPECT() *mockConfigClient_Expecter {
	return &mockConfigClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, name, doguName, dataStr
func (_m *mockConfigClient) Create(ctx context.Context, name string, doguName string, dataStr string) (resourceVersionGetter, error) {
	ret := _m.Called(ctx, name, doguName, dataStr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 resourceVersionGetter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (resourceVersionGetter, error)); ok {
		return rf(ctx, name, doguName, dataStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) resourceVersionGetter); ok {
		r0 = rf(ctx, name, doguName, dataStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resourceVersionGetter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, doguName, dataStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockConfigClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - doguName string
//   - dataStr string
func (_e *mockConfigClient_Expecter) Create(ctx interface{}, name interface{}, doguName interface{}, dataStr interface{}) *mockConfigClient_Create_Call {
	return &mockConfigClient_Create_Call{Call: _e.mock.On("Create", ctx, name, doguName, dataStr)}
}

func (_c *mockConfigClient_Create_Call) Run(run func(ctx context.Context, name string, doguName string, dataStr string)) *mockConfigClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockConfigClient_Create_Call) Return(_a0 resourceVersionGetter, _a1 error) *mockConfigClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_Create_Call) RunAndReturn(run func(context.Context, string, string, string) (resourceVersionGetter, error)) *mockConfigClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name
func (_m *mockConfigClient) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockConfigClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockConfigClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockConfigClient_Expecter) Delete(ctx interface{}, name interface{}) *mockConfigClient_Delete_Call {
	return &mockConfigClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *mockConfigClient_Delete_Call) Run(run func(ctx context.Context, name string)) *mockConfigClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockConfigClient_Delete_Call) Return(_a0 error) *mockConfigClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigClient_Delete_Call) RunAndReturn(run func(context.Context, string) error) *mockConfigClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *mockConfigClient) Get(ctx context.Context, name string) (clientData, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 clientData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (clientData, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) clientData); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(clientData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockConfigClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockConfigClient_Expecter) Get(ctx interface{}, name interface{}) *mockConfigClient_Get_Call {
	return &mockConfigClient_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *mockConfigClient_Get_Call) Run(run func(ctx context.Context, name string)) *mockConfigClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockConfigClient_Get_Call) Return(_a0 clientData, _a1 error) *mockConfigClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_Get_Call) RunAndReturn(run func(context.Context, string) (clientData, error)) *mockConfigClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SingletonList provides a mock function with given fields: ctx, name
func (_m *mockConfigClient) SingletonList(ctx context.Context, name string) (clientData, string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SingletonList")
	}

	var r0 clientData
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (clientData, string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) clientData); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(clientData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockConfigClient_SingletonList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SingletonList'
type mockConfigClient_SingletonList_Call struct {
	*mock.Call
}

// SingletonList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockConfigClient_Expecter) SingletonList(ctx interface{}, name interface{}) *mockConfigClient_SingletonList_Call {
	return &mockConfigClient_SingletonList_Call{Call: _e.mock.On("SingletonList", ctx, name)}
}

func (_c *mockConfigClient_SingletonList_Call) Run(run func(ctx context.Context, name string)) *mockConfigClient_SingletonList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockConfigClient_SingletonList_Call) Return(_a0 clientData, _a1 string, _a2 error) *mockConfigClient_SingletonList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockConfigClient_SingletonList_Call) RunAndReturn(run func(context.Context, string) (clientData, string, error)) *mockConfigClient_SingletonList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, pCtx, name, doguName, dataStr
func (_m *mockConfigClient) Update(ctx context.Context, pCtx string, name string, doguName string, dataStr string) (resourceVersionGetter, error) {
	ret := _m.Called(ctx, pCtx, name, doguName, dataStr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 resourceVersionGetter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (resourceVersionGetter, error)); ok {
		return rf(ctx, pCtx, name, doguName, dataStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) resourceVersionGetter); ok {
		r0 = rf(ctx, pCtx, name, doguName, dataStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resourceVersionGetter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, pCtx, name, doguName, dataStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockConfigClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pCtx string
//   - name string
//   - doguName string
//   - dataStr string
func (_e *mockConfigClient_Expecter) Update(ctx interface{}, pCtx interface{}, name interface{}, doguName interface{}, dataStr interface{}) *mockConfigClient_Update_Call {
	return &mockConfigClient_Update_Call{Call: _e.mock.On("Update", ctx, pCtx, name, doguName, dataStr)}
}

func (_c *mockConfigClient_Update_Call) Run(run func(ctx context.Context, pCtx string, name string, doguName string, dataStr string)) *mockConfigClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *mockConfigClient_Update_Call) Return(_a0 resourceVersionGetter, _a1 error) *mockConfigClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_Update_Call) RunAndReturn(run func(context.Context, string, string, string, string) (resourceVersionGetter, error)) *mockConfigClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientData provides a mock function with given fields: ctx, update
func (_m *mockConfigClient) UpdateClientData(ctx context.Context, update clientData) (resourceVersionGetter, error) {
	ret := _m.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientData")
	}

	var r0 resourceVersionGetter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, clientData) (resourceVersionGetter, error)); ok {
		return rf(ctx, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, clientData) resourceVersionGetter); ok {
		r0 = rf(ctx, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resourceVersionGetter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, clientData) error); ok {
		r1 = rf(ctx, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_UpdateClientData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientData'
type mockConfigClient_UpdateClientData_Call struct {
	*mock.Call
}

// UpdateClientData is a helper method to define mock.On call
//   - ctx context.Context
//   - update clientData
func (_e *mockConfigClient_Expecter) UpdateClientData(ctx interface{}, update interface{}) *mockConfigClient_UpdateClientData_Call {
	return &mockConfigClient_UpdateClientData_Call{Call: _e.mock.On("UpdateClientData", ctx, update)}
}

func (_c *mockConfigClient_UpdateClientData_Call) Run(run func(ctx context.Context, update clientData)) *mockConfigClient_UpdateClientData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientData))
	})
	return _c
}

func (_c *mockConfigClient_UpdateClientData_Call) Return(_a0 resourceVersionGetter, _a1 error) *mockConfigClient_UpdateClientData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_UpdateClientData_Call) RunAndReturn(run func(context.Context, clientData) (resourceVersionGetter, error)) *mockConfigClient_UpdateClientData_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, name, resourceVersion
func (_m *mockConfigClient) Watch(ctx context.Context, name string, resourceVersion string) (<-chan clientWatchResult, error) {
	ret := _m.Called(ctx, name, resourceVersion)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan clientWatchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (<-chan clientWatchResult, error)); ok {
		return rf(ctx, name, resourceVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan clientWatchResult); ok {
		r0 = rf(ctx, name, resourceVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan clientWatchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, resourceVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockConfigClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - resourceVersion string
func (_e *mockConfigClient_Expecter) Watch(ctx interface{}, name interface{}, resourceVersion interface{}) *mockConfigClient_Watch_Call {
	return &mockConfigClient_Watch_Call{Call: _e.mock.On("Watch", ctx, name, resourceVersion)}
}

func (_c *mockConfigClient_Watch_Call) Run(run func(ctx context.Context, name string, resourceVersion string)) *mockConfigClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockConfigClient_Watch_Call) Return(_a0 <-chan clientWatchResult, _a1 error) *mockConfigClient_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigClient_Watch_Call) RunAndReturn(run func(context.Context, string, string) (<-chan clientWatchResult, error)) *mockConfigClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConfigClient creates a new instance of mockConfigClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConfigClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConfigClient {
	mock := &mockConfigClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
