// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	cache "k8s.io/client-go/tools/cache"

	time "time"
)

// mockSharedInformer is an autogenerated mock type for the sharedInformer type
type mockSharedInformer struct {
	mock.Mock
}

type mockSharedInformer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSharedInformer) EXPECT() *mockSharedInformer_Expecter {
	return &mockSharedInformer_Expecter{mock: &_m.Mock}
}

// AddEventHandler provides a mock function with given fields: handler
func (_m *mockSharedInformer) AddEventHandler(handler cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandler")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler) error); ok {
		r1 = rf(handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSharedInformer_AddEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventHandler'
type mockSharedInformer_AddEventHandler_Call struct {
	*mock.Call
}

// AddEventHandler is a helper method to define mock.On call
//   - handler cache.ResourceEventHandler
func (_e *mockSharedInformer_Expecter) AddEventHandler(handler interface{}) *mockSharedInformer_AddEventHandler_Call {
	return &mockSharedInformer_AddEventHandler_Call{Call: _e.mock.On("AddEventHandler", handler)}
}

func (_c *mockSharedInformer_AddEventHandler_Call) Run(run func(handler cache.ResourceEventHandler)) *mockSharedInformer_AddEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandler))
	})
	return _c
}

func (_c *mockSharedInformer_AddEventHandler_Call) Return(_a0 cache.ResourceEventHandlerRegistration, _a1 error) *mockSharedInformer_AddEventHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSharedInformer_AddEventHandler_Call) RunAndReturn(run func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)) *mockSharedInformer_AddEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// AddEventHandlerWithResyncPeriod provides a mock function with given fields: handler, resyncPeriod
func (_m *mockSharedInformer) AddEventHandlerWithResyncPeriod(handler cache.ResourceEventHandler, resyncPeriod time.Duration) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler, resyncPeriod)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandlerWithResyncPeriod")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler, resyncPeriod)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler, resyncPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, time.Duration) error); ok {
		r1 = rf(handler, resyncPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSharedInformer_AddEventHandlerWithResyncPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventHandlerWithResyncPeriod'
type mockSharedInformer_AddEventHandlerWithResyncPeriod_Call struct {
	*mock.Call
}

// AddEventHandlerWithResyncPeriod is a helper method to define mock.On call
//   - handler cache.ResourceEventHandler
//   - resyncPeriod time.Duration
func (_e *mockSharedInformer_Expecter) AddEventHandlerWithResyncPeriod(handler interface{}, resyncPeriod interface{}) *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call {
	return &mockSharedInformer_AddEventHandlerWithResyncPeriod_Call{Call: _e.mock.On("AddEventHandlerWithResyncPeriod", handler, resyncPeriod)}
}

func (_c *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call) Run(run func(handler cache.ResourceEventHandler, resyncPeriod time.Duration)) *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandler), args[1].(time.Duration))
	})
	return _c
}

func (_c *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call) Return(_a0 cache.ResourceEventHandlerRegistration, _a1 error) *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call) RunAndReturn(run func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)) *mockSharedInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// AddIndexers provides a mock function with given fields: indexers
func (_m *mockSharedInformer) AddIndexers(indexers cache.Indexers) error {
	ret := _m.Called(indexers)

	if len(ret) == 0 {
		panic("no return value specified for AddIndexers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Indexers) error); ok {
		r0 = rf(indexers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSharedInformer_AddIndexers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIndexers'
type mockSharedInformer_AddIndexers_Call struct {
	*mock.Call
}

// AddIndexers is a helper method to define mock.On call
//   - indexers cache.Indexers
func (_e *mockSharedInformer_Expecter) AddIndexers(indexers interface{}) *mockSharedInformer_AddIndexers_Call {
	return &mockSharedInformer_AddIndexers_Call{Call: _e.mock.On("AddIndexers", indexers)}
}

func (_c *mockSharedInformer_AddIndexers_Call) Run(run func(indexers cache.Indexers)) *mockSharedInformer_AddIndexers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.Indexers))
	})
	return _c
}

func (_c *mockSharedInformer_AddIndexers_Call) Return(_a0 error) *mockSharedInformer_AddIndexers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_AddIndexers_Call) RunAndReturn(run func(cache.Indexers) error) *mockSharedInformer_AddIndexers_Call {
	_c.Call.Return(run)
	return _c
}

// GetController provides a mock function with given fields:
func (_m *mockSharedInformer) GetController() cache.Controller {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetController")
	}

	var r0 cache.Controller
	if rf, ok := ret.Get(0).(func() cache.Controller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Controller)
		}
	}

	return r0
}

// mockSharedInformer_GetController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetController'
type mockSharedInformer_GetController_Call struct {
	*mock.Call
}

// GetController is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) GetController() *mockSharedInformer_GetController_Call {
	return &mockSharedInformer_GetController_Call{Call: _e.mock.On("GetController")}
}

func (_c *mockSharedInformer_GetController_Call) Run(run func()) *mockSharedInformer_GetController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_GetController_Call) Return(_a0 cache.Controller) *mockSharedInformer_GetController_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_GetController_Call) RunAndReturn(run func() cache.Controller) *mockSharedInformer_GetController_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexer provides a mock function with given fields:
func (_m *mockSharedInformer) GetIndexer() cache.Indexer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndexer")
	}

	var r0 cache.Indexer
	if rf, ok := ret.Get(0).(func() cache.Indexer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Indexer)
		}
	}

	return r0
}

// mockSharedInformer_GetIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexer'
type mockSharedInformer_GetIndexer_Call struct {
	*mock.Call
}

// GetIndexer is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) GetIndexer() *mockSharedInformer_GetIndexer_Call {
	return &mockSharedInformer_GetIndexer_Call{Call: _e.mock.On("GetIndexer")}
}

func (_c *mockSharedInformer_GetIndexer_Call) Run(run func()) *mockSharedInformer_GetIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_GetIndexer_Call) Return(_a0 cache.Indexer) *mockSharedInformer_GetIndexer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_GetIndexer_Call) RunAndReturn(run func() cache.Indexer) *mockSharedInformer_GetIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function with given fields:
func (_m *mockSharedInformer) GetStore() cache.Store {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 cache.Store
	if rf, ok := ret.Get(0).(func() cache.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Store)
		}
	}

	return r0
}

// mockSharedInformer_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type mockSharedInformer_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) GetStore() *mockSharedInformer_GetStore_Call {
	return &mockSharedInformer_GetStore_Call{Call: _e.mock.On("GetStore")}
}

func (_c *mockSharedInformer_GetStore_Call) Run(run func()) *mockSharedInformer_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_GetStore_Call) Return(_a0 cache.Store) *mockSharedInformer_GetStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_GetStore_Call) RunAndReturn(run func() cache.Store) *mockSharedInformer_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// HasSynced provides a mock function with given fields:
func (_m *mockSharedInformer) HasSynced() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasSynced")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockSharedInformer_HasSynced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSynced'
type mockSharedInformer_HasSynced_Call struct {
	*mock.Call
}

// HasSynced is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) HasSynced() *mockSharedInformer_HasSynced_Call {
	return &mockSharedInformer_HasSynced_Call{Call: _e.mock.On("HasSynced")}
}

func (_c *mockSharedInformer_HasSynced_Call) Run(run func()) *mockSharedInformer_HasSynced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_HasSynced_Call) Return(_a0 bool) *mockSharedInformer_HasSynced_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_HasSynced_Call) RunAndReturn(run func() bool) *mockSharedInformer_HasSynced_Call {
	_c.Call.Return(run)
	return _c
}

// IsStopped provides a mock function with given fields:
func (_m *mockSharedInformer) IsStopped() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStopped")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockSharedInformer_IsStopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStopped'
type mockSharedInformer_IsStopped_Call struct {
	*mock.Call
}

// IsStopped is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) IsStopped() *mockSharedInformer_IsStopped_Call {
	return &mockSharedInformer_IsStopped_Call{Call: _e.mock.On("IsStopped")}
}

func (_c *mockSharedInformer_IsStopped_Call) Run(run func()) *mockSharedInformer_IsStopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_IsStopped_Call) Return(_a0 bool) *mockSharedInformer_IsStopped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_IsStopped_Call) RunAndReturn(run func() bool) *mockSharedInformer_IsStopped_Call {
	_c.Call.Return(run)
	return _c
}

// LastSyncResourceVersion provides a mock function with given fields:
func (_m *mockSharedInformer) LastSyncResourceVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastSyncResourceVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockSharedInformer_LastSyncResourceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastSyncResourceVersion'
type mockSharedInformer_LastSyncResourceVersion_Call struct {
	*mock.Call
}

// LastSyncResourceVersion is a helper method to define mock.On call
func (_e *mockSharedInformer_Expecter) LastSyncResourceVersion() *mockSharedInformer_LastSyncResourceVersion_Call {
	return &mockSharedInformer_LastSyncResourceVersion_Call{Call: _e.mock.On("LastSyncResourceVersion")}
}

func (_c *mockSharedInformer_LastSyncResourceVersion_Call) Run(run func()) *mockSharedInformer_LastSyncResourceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSharedInformer_LastSyncResourceVersion_Call) Return(_a0 string) *mockSharedInformer_LastSyncResourceVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_LastSyncResourceVersion_Call) RunAndReturn(run func() string) *mockSharedInformer_LastSyncResourceVersion_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEventHandler provides a mock function with given fields: handle
func (_m *mockSharedInformer) RemoveEventHandler(handle cache.ResourceEventHandlerRegistration) error {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEventHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandlerRegistration) error); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSharedInformer_RemoveEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEventHandler'
type mockSharedInformer_RemoveEventHandler_Call struct {
	*mock.Call
}

// RemoveEventHandler is a helper method to define mock.On call
//   - handle cache.ResourceEventHandlerRegistration
func (_e *mockSharedInformer_Expecter) RemoveEventHandler(handle interface{}) *mockSharedInformer_RemoveEventHandler_Call {
	return &mockSharedInformer_RemoveEventHandler_Call{Call: _e.mock.On("RemoveEventHandler", handle)}
}

func (_c *mockSharedInformer_RemoveEventHandler_Call) Run(run func(handle cache.ResourceEventHandlerRegistration)) *mockSharedInformer_RemoveEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandlerRegistration))
	})
	return _c
}

func (_c *mockSharedInformer_RemoveEventHandler_Call) Return(_a0 error) *mockSharedInformer_RemoveEventHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_RemoveEventHandler_Call) RunAndReturn(run func(cache.ResourceEventHandlerRegistration) error) *mockSharedInformer_RemoveEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: stopCh
func (_m *mockSharedInformer) Run(stopCh <-chan struct{}) {
	_m.Called(stopCh)
}

// mockSharedInformer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type mockSharedInformer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - stopCh <-chan struct{}
func (_e *mockSharedInformer_Expecter) Run(stopCh interface{}) *mockSharedInformer_Run_Call {
	return &mockSharedInformer_Run_Call{Call: _e.mock.On("Run", stopCh)}
}

func (_c *mockSharedInformer_Run_Call) Run(run func(stopCh <-chan struct{})) *mockSharedInformer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan struct{}))
	})
	return _c
}

func (_c *mockSharedInformer_Run_Call) Return() *mockSharedInformer_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSharedInformer_Run_Call) RunAndReturn(run func(<-chan struct{})) *mockSharedInformer_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransform provides a mock function with given fields: handler
func (_m *mockSharedInformer) SetTransform(handler cache.TransformFunc) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for SetTransform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.TransformFunc) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSharedInformer_SetTransform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransform'
type mockSharedInformer_SetTransform_Call struct {
	*mock.Call
}

// SetTransform is a helper method to define mock.On call
//   - handler cache.TransformFunc
func (_e *mockSharedInformer_Expecter) SetTransform(handler interface{}) *mockSharedInformer_SetTransform_Call {
	return &mockSharedInformer_SetTransform_Call{Call: _e.mock.On("SetTransform", handler)}
}

func (_c *mockSharedInformer_SetTransform_Call) Run(run func(handler cache.TransformFunc)) *mockSharedInformer_SetTransform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.TransformFunc))
	})
	return _c
}

func (_c *mockSharedInformer_SetTransform_Call) Return(_a0 error) *mockSharedInformer_SetTransform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_SetTransform_Call) RunAndReturn(run func(cache.TransformFunc) error) *mockSharedInformer_SetTransform_Call {
	_c.Call.Return(run)
	return _c
}

// SetWatchErrorHandler provides a mock function with given fields: handler
func (_m *mockSharedInformer) SetWatchErrorHandler(handler cache.WatchErrorHandler) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for SetWatchErrorHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.WatchErrorHandler) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSharedInformer_SetWatchErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWatchErrorHandler'
type mockSharedInformer_SetWatchErrorHandler_Call struct {
	*mock.Call
}

// SetWatchErrorHandler is a helper method to define mock.On call
//   - handler cache.WatchErrorHandler
func (_e *mockSharedInformer_Expecter) SetWatchErrorHandler(handler interface{}) *mockSharedInformer_SetWatchErrorHandler_Call {
	return &mockSharedInformer_SetWatchErrorHandler_Call{Call: _e.mock.On("SetWatchErrorHandler", handler)}
}

func (_c *mockSharedInformer_SetWatchErrorHandler_Call) Run(run func(handler cache.WatchErrorHandler)) *mockSharedInformer_SetWatchErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.WatchErrorHandler))
	})
	return _c
}

func (_c *mockSharedInformer_SetWatchErrorHandler_Call) Return(_a0 error) *mockSharedInformer_SetWatchErrorHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSharedInformer_SetWatchErrorHandler_Call) RunAndReturn(run func(cache.WatchErrorHandler) error) *mockSharedInformer_SetWatchErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSharedInformer creates a new instance of mockSharedInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSharedInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSharedInformer {
	mock := &mockSharedInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
